(()=>{"use strict";var e={862:(e,t,r)=>{e.exports=r.p+"70b86524e51744f35789.ico"},366:(e,t,r)=>{e.exports=r.p+"c2fc95356945a2723bfc.svg"},402:(e,t,r)=>{e.exports=r.p+"4e8e0a1d604782a0dff8.svg"}},t={};function r(s){var i=t[s];if(void 0!==i)return i.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,r),o.exports}r.p="",(()=>{class e{constructor(e,t){this._formElement=t,this._config=e}_showInputError(e,t){const r=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.errorClass),r.textContent=t,r.classList.add(this._config.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.errorClass),t.classList.remove(this._config.inputErrorClass),t.textContent=""}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._config.inactiveButtonClass))}_checkInputValidity(e){e.addEventListener("input",function(){this._toggleButtonState(),e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}.bind(this))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._inputList.forEach((e=>{this._checkInputValidity(e)}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners(),this._formElement.addEventListener("submit",(function(e){e.preventDefault()}))}}class t{constructor(e,t,r,s,i,o){this._handleCardClick=r,this._handleCardDelete=s,this._handleCardLike=i,this.userId=o,this.cardOwnerId=e.owner._id,this.cardId=e._id,this._name=e.name,this._link=e.link,this._likes=e.likes,this._cardTemplate=document.querySelector(t).content,this._cardElement=this._cardTemplate.querySelector(".card").cloneNode(!0),this._cardLikesCount=this._cardElement.querySelector(".card__like-counter"),this._cardLike=this._cardElement.querySelector(".card__like")}_setEventListeners(){this._cardLike.addEventListener("click",(()=>this._handleCardLike(this))),null!=this._cardDeleteElm&&this._cardDeleteElm.addEventListener("click",(()=>this._handleCardDelete(this))),this._cardImgElm.addEventListener("click",(()=>{const e={link:this._cardImgElm.src,name:this._cardImgElm.alt};this._handleCardClick(e)}))}removeCard(){this._cardElement.remove(),this._cardElement=null}isLiked(){return this._likes.some((e=>e._id===this.userId))}toggleLike(e){this.isLiked()?this._cardLike.classList.remove("btn-like_state_active"):this._cardLike.classList.add("btn-like_state_active"),this._likes=e,this._cardLikesCount.textContent=this._likes.length}createCard(){const e=this._cardElement.querySelector(".card__name");return this._cardImgElm=this._cardElement.querySelector(".card__img"),this._cardDeleteElm=this._cardElement.querySelector(".card__delete-card"),e.textContent=this._name,this._cardLikesCount.textContent=this._likes.length,this._cardImgElm.setAttribute("src",this._link),this._cardImgElm.setAttribute("alt",this._name),this._likes.forEach((e=>{e._id===this.userId&&this._cardLike.classList.add("btn-like_state_active")})),this.cardOwnerId!=this.userId&&(this._cardDeleteElm.remove(),this._cardDeleteElm=null),this._setEventListeners(),this._cardElement}}const s={loadingBlueUrl:r(366),headerLogoURL:r(402),faviconURL:r(862)},i={inputSelector:".popup__input",submitButtonSelector:".popup__btn-submit",inactiveButtonClass:"popup__btn-submit_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class n{constructor(e){o(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),o(this,"_handleClose",(e=>{const t=e.target.classList;(t.contains("overlay__btn-close")||t.contains("overlay"))&&(e.stopPropagation(),this.close())})),this._popup=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popup.classList.add("overlay_visible"),this.setEventListeners()}close(){this._popup.classList.remove("overlay_visible"),this._popup.removeEventListener("mousedown",this._handleClose),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleClose),document.addEventListener("keydown",this._handleEscClose)}}class a extends n{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".form"),this._handleSubmit=this._handleSubmit.bind(this),this._submitButton=this._popup.querySelector(".popup__btn-submit"),console.log(e),this._submitButtonTextBeforeLoading=this._submitButton.textContent}_getInputValues(){return this._inputValues={},this._inputsList=[...this._form.querySelectorAll(".popup__input")],this._inputsList.forEach((e=>this._inputValues[e.name]=e.value)),this._inputValues}setEventListeners(){this._form.addEventListener("submit",this._handleSubmit),super.setEventListeners()}setAction(e){this._submitHandler=e}_setLoading(){this._submitButton.textContent+="...",this._submitButton.disabled=!0}_removeLoading(){this._submitButton.textContent=this._submitButtonTextBeforeLoading,this._submitButton.disabled=!1}_handleSubmit(e){e.preventDefault(),this._setLoading(),this._submitHandler(this._getInputValues())}close(){this._form.removeEventListener("submit",this._handleSubmit),this._form.reset(),super.close(),this._removeLoading()}}class l{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}render(){this._items.forEach((e=>this._renderer(e)))}addItem(e){null!=e&&this._container.prepend(e)}}const c=new class{constructor(e){let{baseUrl:t,headers:r}=e;var s,i;i=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))),(s="customFetch")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._baseUrl=t,this._headers={headers:r}}getUserInfo(){return this.customFetch("".concat(this._baseUrl,"/users/me"),this._headers)}getInitialCards(){return this.customFetch("".concat(this._baseUrl,"/cards"),this._headers)}createNewCard(e){return this.customFetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers.headers,body:JSON.stringify(e)})}setProfileInfo(e){const t={name:e.profileName,about:e.profileTitle,avatar:e.profileAvatar};return this.customFetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers.headers,body:JSON.stringify(t)})}deleteCard(e){return this.customFetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers.headers})}addLike(e){return this.customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers.headers})}removeLike(e){return this.customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers.headers})}setAvatar(e){return this.customFetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers.headers,body:JSON.stringify(e)})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"89275f46-d96a-420c-9a94-a2948b040a2e","Content-Type":"application/json"}}),h={profileInfo:{profileName:".profile__name",profileTitle:".profile__title",profileAvatar:".profile__avatar"},profileForm:{form:"#formProfile",profileName:"#profileName",profileTitle:"#profileTitle",profileAvatarImage:"#avatarImage"},overlayImage:"#overlayImage",cardList:".cards",cardTemplate:"#card",cardForm:"#formCard",profileAvatarForm:"#formProfileAvatar",popupConfirmAction:"#popupConfirmAction",popupWithMessage:"#popupWithMessage"},d=document.querySelector(h.profileForm.form),u=document.querySelector(h.profileAvatarForm),_=document.querySelector(h.profileForm.profileName),p=document.querySelector(h.profileForm.profileTitle),m=new class{constructor(e){this._profileName=document.querySelector(e.profileName),this._profileTitle=document.querySelector(e.profileTitle),this._avatar=document.querySelector(e.profileAvatar),this.userId}getUserInfo(){return{profileName:this._profileName.textContent,profileTitle:this._profileTitle.textContent}}setUserInfo(e){let{profileName:t,profileTitle:r}=e;this._profileName.textContent=t,this._profileTitle.textContent=r}getUserAvatar(){return{profileName:this._profileName.textContent,profileTitle:this._profileTitle.textContent}}setUserAvatar(e){this._avatar.src=e}}(h.profileInfo),f=document.querySelector(h.cardForm);let v,b=document.querySelector("#cardsLoading");const E=new class extends n{constructor(e){var t,r;super(e),r=()=>{this._submit.removeEventListener("click",this.handleClick),this.close()},(t="handleClick")in this?Object.defineProperty(this,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[t]=r,this._title=this._popup.querySelector(".popup__lbl-title"),this._subtext=this._popup.querySelector(".popup__lbl-subtext"),this._submit=this._popup.querySelector(".popup__btn-submit")}open(e,t){let{title:r,subtext:s}=e;t&&(this._title.style.color="red",this._subtext.style.color="red"),this._title.textContent=r,this._subtext.textContent=s,this._setEventListeners(),super.open()}_setEventListeners(){this._submit.addEventListener("click",this.handleClick)}}(h.popupWithMessage),L=new a(h.popupConfirmAction),g=new class extends n{constructor(e){super(e),this._popupImage=this._popup.querySelector(".overlay__img"),this._title=this._popup.querySelector(".overlay__text")}open(e){let{name:t,link:r}=e;this._popupImage.src=r,this._popupImage.alt=t,this._title.textContent=t,super.open()}}(h.overlayImage),y=new a(h.cardForm,(e=>{c.createNewCard(e).then((e=>{q(e)})).catch((e=>{""==e&&(e="Failed to get response from server"),E.open({title:"Error occurs",subtext:e},"Error")})).finally((()=>{y.close()}))})),C=new a(h.profileForm.form,(e=>{c.setProfileInfo(e).then((()=>{m.setUserInfo(e),C.close()})).catch((e=>{""==e&&(e="Failed to update"),E.open({title:"Error occurs",subtext:e},"Error")})).finally((()=>{C.close()}))})),k=new a(h.profileAvatarForm,(e=>{c.setAvatar(e).then((()=>{m.setUserAvatar(e.avatar),k.close()})).catch((e=>{""==e&&(e="Failed to update"),E.open({title:"Error occurs",subtext:e},"Error")})).finally((()=>{k.close()}))})),I=new e(i,f),S=new e(i,d),x=new e(i,u);function q(e){v.addItem(new t(e,h.cardTemplate,T,U,A,m.userId).createCard(m.userId))}function T(e){g.open(e)}function U(e){L.open(),L.setAction((()=>{c.deleteCard(e.cardId).then((()=>{e.removeCard(),L.close()})).catch((e=>{""==e&&(e="Failed to delete card"),E.open({title:"Error occurs",subtext:e},"Error")})).finally((()=>{L.close()}))}))}function A(e){e.isLiked()?c.removeLike(e.cardId).then((t=>e.toggleLike(t.likes))).catch((e=>{""==e&&(e="Failed to removeLike"),E.open({title:"Error occurs",subtext:e},"Error")})):c.addLike(e.cardId).then((t=>e.toggleLike(t.likes))).catch((e=>{""==e&&(e="Failed to add a like"),E.open({title:"Error occurs",subtext:e},"Error")}))}S.enableValidation(),I.enableValidation(),x.enableValidation(),Promise.all([c.getUserInfo(),c.getInitialCards()]).then((e=>{let[t,r]=e;m.userId=t._id;const s={profileName:t.name,profileTitle:t.about,avatar:t.avatar};m.setUserInfo(s),m.setUserAvatar(s.avatar),b.remove(),b=null,v=new l({items:r,renderer:q},h.cardList),v.render()})).catch((e=>{""==e&&(e="Failed to get card & user info"),E.open({title:"Error occurs",subtext:e},"Error")})),function(){const e=document.querySelector("#profileAvatar"),t=document.querySelector("#headerLogo"),r=document.querySelector("#favicon"),{loadingBlueUrl:i,headerLogoURL:o,faviconURL:n}=s;e.src=i,t.src=o,b.src=i,r.href=n}(),document.querySelector(".profile__edit-info").addEventListener("click",(function(){!function(e){console.log(h);const{profileName:t,profileTitle:r}=e;_.value=t,p.value=r}(m.getUserInfo()),S.resetValidation(),C.open()})),document.querySelector(".profile__add").addEventListener("click",(()=>{I.resetValidation(),y.open()})),document.querySelector("#profileAvatarEdit").addEventListener("click",(()=>{x.resetValidation(),k.open()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,