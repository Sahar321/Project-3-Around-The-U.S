(()=>{"use strict";var e={966:(e,t,s)=>{e.exports=s.p+"70b86524e51744f35789.ico"},423:(e,t,s)=>{e.exports=s.p+"c2fc95356945a2723bfc.svg"},286:(e,t,s)=>{e.exports=s.p+"4e8e0a1d604782a0dff8.svg"}},t={};function s(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}s.p="",(()=>{class e{constructor(e,t){this._formElement=t,this._config=e}_showInputError(e,t){const s=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.errorClass),s.textContent=t,s.classList.add(this._config.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.errorClass),t.classList.remove(this._config.inputErrorClass),t.textContent=""}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._config.inactiveButtonClass))}_checkInputValidity(e){e.addEventListener("input",function(){this._toggleButtonState(),e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}.bind(this))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._inputList.forEach((e=>{this._checkInputValidity(e)}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners(),this._formElement.addEventListener("submit",(function(e){e.preventDefault()}))}}class t{constructor(e,t,s,r,i,o){this._handleCardClick=s,this._handleCardDelete=r,this._handleCardLike=i,this.userId=o,this.cardOwnerId=e.owner._id,this.cardId=e._id,this._name=e.name,this._link=e.link,this._likes=e.likes,this._cardTemplate=document.querySelector(t).content,this._cardElement=this._cardTemplate.querySelector(".card").cloneNode(!0),this._cardLikesCount=this._cardElement.querySelector(".card__like-counter"),this._cardLike=this._cardElement.querySelector(".card__like")}_setEventListeners(){this._cardLike.addEventListener("click",(()=>this._handleCardLike(this))),null!=this._cardDeleteElm&&this._cardDeleteElm.addEventListener("click",(()=>this._handleCardDelete(this))),this._cardImgElm.addEventListener("click",(()=>{const e={link:this._cardImgElm.src,name:this._cardImgElm.alt};this._handleCardClick(e)}))}removeCard(){this._cardElement.remove(),this._cardElement=null}isLiked(){return this._likes.some((e=>e._id===this.userId))}toggleLike(e){this.isLiked()?this._cardLike.classList.remove("btn-like_state_active"):this._cardLike.classList.add("btn-like_state_active"),this._likes=e,this._cardLikesCount.textContent=this._likes.length}createCard(e){const t=this._cardElement.querySelector(".card__name");return this._cardImgElm=this._cardElement.querySelector(".card__img"),this._cardDeleteElm=this._cardElement.querySelector(".card__delete-card"),t.textContent=this._name,this._cardLikesCount.textContent=this._likes.length,this._cardImgElm.setAttribute("src",this._link),this._cardImgElm.setAttribute("alt",this._name),this._likes.forEach((t=>{t._id===e&&this._cardLike.classList.add("btn-like_state_active")})),this.cardOwnerId!=e&&(this._cardDeleteElm.remove(),this._cardDeleteElm=null),this._setEventListeners(),this._cardElement}}const r={loadingBlueUrl:s(423),headerLogoURL:s(286),faviconURL:s(966)},i={inputSelector:".popup__input",submitButtonSelector:".popup__btn-submit",inactiveButtonClass:"popup__btn-submit_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e){o(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),o(this,"_handleClose",(e=>{const t=e.target.classList;(t.contains("overlay__btn-close")||t.contains("overlay"))&&(e.stopPropagation(),this.close())})),this._popup=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popup.classList.add("overlay_visible"),this.setEventListeners()}close(){this._popup.classList.remove("overlay_visible"),this._popup.removeEventListener("mousedown",this._handleClose),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleClose),document.addEventListener("keydown",this._handleEscClose)}}class a extends n{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".form"),this._handleSubmit=this._handleSubmit.bind(this),this._submitButton=this._popup.querySelector(".popup__btn-submit"),this._submitButtonTextBeforeLoading=this._submitButton.textContent}_getInputValues(){const e={};return[...this._form.querySelectorAll(".popup__input")].forEach((t=>e[t.name]=t.value)),e}setEventListeners(){this._form.addEventListener("submit",this._handleSubmit),super.setEventListeners()}_setLoading(){this._submitButton.classList.add("popup__btn-submit_inactive"),this._submitButton.textContent+="...",this._submitButton.disabled=!0}_removeLoading(){this._submitButton.classList.remove("popup__btn-submit_inactive"),this._submitButton.textContent=this._submitButtonTextBeforeLoading,this._submitButton.disabled=!1}_handleSubmit(e){e.preventDefault(),this._setLoading(),this._submitHandler(this._getInputValues())}close(){this._form.removeEventListener("submit",this._handleSubmit),this._form.reset(),super.close(),this._removeLoading()}}class l{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}render(){this._items.forEach((e=>this._renderer(e)))}addItem(e){null!=e&&this._container.prepend(e)}}const c=new class{constructor(e){let{baseUrl:t,headers:s}=e;var r,i;i=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.error("Error:",e))),(r="customFetch")in this?Object.defineProperty(this,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[r]=i,this._baseUrl=t,this._headers={headers:s}}getUserInfo(){return this.customFetch("".concat(this._baseUrl,"/users/me"),this._headers)}getInitialCards(){return this.customFetch("".concat(this._baseUrl,"/cards"),this._headers)}createNewCard(e){return this.customFetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers.headers,body:JSON.stringify(e)})}setProfileInfo(e){const t={name:e.profileName,about:e.profileTitle,avatar:e.profileAvatar};return this.customFetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers.headers,body:JSON.stringify(t)})}deleteCard(e){return this.customFetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers.headers})}addLike(e){return this.customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers.headers})}removeLike(e){return this.customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers.headers})}setAvatar(e){return this.customFetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers.headers,body:JSON.stringify(e)})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"89275f46-d96a-420c-9a94-a2948b040a2e","Content-Type":"application/json"}}),d="#formCard",h="#formProfile",u="#formProfileAvatar",_=document.querySelector(h),m=document.querySelector(u),p=new class{constructor(e){this._profileName=document.querySelector(e.profileNameSelector),this._profileTitle=document.querySelector(e.profileTitleSelector),this._avatar=document.querySelector(e.profileAvatarSelector),this.userId}getUserInfo(){return{profileName:this._profileName.textContent,profileTitle:this._profileTitle.textContent}}setUserInfo(e){let{profileName:t,profileTitle:s}=e;this._profileName.textContent=t,this._profileTitle.textContent=s}getUserAvatar(){return{profileName:this._profileName.textContent,profileTitle:this._profileTitle.textContent}}setUserAvatar(e){this._avatar.src=e}}({profileNameSelector:".profile__name",profileTitleSelector:".profile__title",profileAvatarSelector:".profile__avatar"}),f=document.querySelector(d);let v,b=document.querySelector("#cardsLoading");const E=new class extends a{setAction(e){this._submitHandler=e}}("#popupConfirmAction"),L=new class extends n{constructor(e){super(e),this._popupImage=this._popup.querySelector(".overlay__img")}open(e){let{name:t,link:s}=e;const r=this._popup.querySelector(".overlay__text");this._popupImage.src=s,this._popupImage.alt=t,r.textContent=t,this.setEventListeners(),super.open()}}("#overlayImage"),g=new a(d,(e=>{c.createNewCard(e).then((e=>{q(e),g.close()}))})),y=new a(h,(e=>{c.setProfileInfo(e).then((()=>{p.setUserInfo(e),y.close()}))})),C=new a(u,(e=>{c.setAvatar(e).then((()=>{p.setUserAvatar(e.avatar),C.close()}))})),k=new e(i,f),S=new e(i,_),I=new e(i,m);function q(e){const s=new t(e,"#card",x,U,w,p.userId);v.addItem(s.createCard(p.userId))}function x(e){L.open(e)}function U(e){E.open(),E.setAction((()=>{c.deleteCard(e.cardId).then((()=>{e.removeCard(),E.close()}))}))}function w(e){e.isLiked()?c.removeLike(e.cardId).then((t=>e.toggleLike(t.likes))):c.addLike(e.cardId).then((t=>e.toggleLike(t.likes)))}S.enableValidation(),k.enableValidation(),I.enableValidation(),Promise.all([c.getUserInfo(),c.getInitialCards()]).then((e=>{let[t,s]=e;p.userId=t._id;const r={profileName:t.name,profileTitle:t.about,avatar:t.avatar};p.setUserInfo(r),p.setUserAvatar(r.avatar),b.remove(),b=null,v=new l({items:s,renderer:q},".cards"),v.render()})),function(){const e=document.querySelector("#profileAvatar"),t=document.querySelector("#headerLogo"),s=document.querySelector("#favicon"),{loadingBlueUrl:i,headerLogoURL:o,faviconURL:n}=r;e.src=i,t.src=o,b.src=i,s.href=n}(),document.querySelector(".profile__edit-info").addEventListener("click",(function(){!function(e){const t=document.querySelector("#profileName"),s=document.querySelector("#profileTitle"),{profileName:r,profileTitle:i}=e;t.value=r,s.value=i}(p.getUserInfo()),S.resetValidation(),y.open()})),document.querySelector(".profile__add").addEventListener("click",(()=>{k.resetValidation(),g.open()})),document.querySelector("#profileAvatarEdit").addEventListener("click",(()=>{I.resetValidation(),C.open()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,