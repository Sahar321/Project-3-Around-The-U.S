(()=>{"use strict";var e={452:(e,t,s)=>{e.exports=s.p+"993f3d93348c99403d38.png"},966:(e,t,s)=>{e.exports=s.p+"70b86524e51744f35789.ico"},286:(e,t,s)=>{e.exports=s.p+"4e8e0a1d604782a0dff8.svg"}},t={};function s(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}s.p="",(()=>{class e{constructor(e,t){this._formElement=t,this._config=e}_showInputError(e,t){const s=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.errorClass),s.textContent=t,s.classList.add(this._config.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.errorClass),t.classList.remove(this._config.inputErrorClass),t.textContent=""}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._config.inactiveButtonClass))}_checkInputValidity(e){e.addEventListener("input",function(){this._toggleButtonState(),e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}.bind(this))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._inputList.forEach((e=>{this._checkInputValidity(e)}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners(),this._formElement.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e,s,r){t(this,"_handleClick",(()=>{const e={cardURL:this._cardImg.getAttribute("src"),cardTitle:this._cardImg.getAttribute("alt")};this._handleCardClick(e)})),t(this,"_handleLikeCard",(()=>{this._cardLike.classList.toggle("btn-like_state_active")})),t(this,"_handleDeleteCard",(()=>{this._card.remove(),this._card=null})),this._handleCardClick=r,this._cardTitle=e.cardTitle,this._cardURL=e.cardURL,this._cardTemplate=document.querySelector(s).content}_setEventListeners(){this._cardLike.addEventListener("click",this._handleLikeCard),this._cardDelete.addEventListener("click",this._handleDeleteCard),this._cardImg.addEventListener("click",this._handleClick)}createCard(){this._card=this._cardTemplate.querySelector(".card").cloneNode(!0);const e=this._card.querySelector(".card__name");return this._cardImg=this._card.querySelector(".card__img"),this._cardLike=this._card.querySelector(".card__like"),this._cardDelete=this._card.querySelector(".card__delete-card"),e.textContent=this._cardTitle,this._cardImg.setAttribute("src",this._cardURL),this._cardImg.setAttribute("alt",this._cardTitle),this._setEventListeners(),this._card}}const i={profileAvaterURL:s(452),headerLogoURL:s(286),faviconURL:s(966)},o={inputSelector:".popup__input",submitButtonSelector:".popup__btn-submit",inactiveButtonClass:"popup__btn-submit_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class a{constructor(e){n(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),n(this,"_handleClose",(e=>{const t=e.target.classList;(t.contains("overlay__btn-close")||t.contains("overlay"))&&(e.stopPropagation(),this.close())})),this._popup=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popup.classList.add("overlay_visible"),this.setEventListeners()}close(){this._popup.classList.remove("overlay_visible"),this._popup.removeEventListener("mousedown",this._handleClose),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleClose),document.addEventListener("keydown",this._handleEscClose)}}class c extends a{constructor(e,t){super(e),this._submitHandler=t,this._form=this._popup.querySelector(".form"),this._handleSubmit=this._handleSubmit.bind(this)}_getInputValues(){const e={};return[...this._form.querySelectorAll(".popup__input")].forEach((t=>e[t.name]=t.value)),e}open(){this.setEventListeners(),super.open()}setEventListeners(){this._form.addEventListener("submit",this._handleSubmit),super.setEventListeners()}_handleSubmit(e){e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()}close(){this._form.removeEventListener("submit",this._handleSubmit),this._form.reset(),super.close()}}const l="#formCard",d="#formProfile",u=document.querySelector(d),h=document.querySelector(".profile__add"),_=document.querySelector(".profile__edit-info"),p=new class{constructor(e){let{profileNameSelector:t,profileTitleSelector:s}=e;this._profileName=document.querySelector(t),this._profileTitle=document.querySelector(s)}getUserInfo(){return{profileName:this._profileName.textContent,profileTitle:this._profileTitle.textContent}}setUserInfo(e){let{profileName:t,profileTitle:s}=e;this._profileName.textContent=t,this._profileTitle.textContent=s}}({profileNameSelector:".profile__name",profileTitleSelector:".profile__title"}),m=document.querySelector(l),f=new class extends a{constructor(e){super(e),this._popupImage=this._popup.querySelector(".overlay__img")}open(e){let{cardTitle:t,cardURL:s}=e;const r=this._popup.querySelector(".overlay__text");this._popupImage.src=s,this._popupImage.alt=t,r.textContent=t,this.setEventListeners(),super.open()}setEventListeners(){this._popupImage.addEventListener("click",this.close),super.setEventListeners()}close(){this._popupImage.removeEventListener("click",this.close),super.close()}}("#overlayImage"),v=new c(l,(e=>y(e))),L=new c(d,(e=>p.setUserInfo(e))),g=new e(o,m),b=new e(o,u);b.enableValidation(),g.enableValidation(),function(){const e=document.querySelector("#profileAvater"),t=document.querySelector("#headerLogo"),s=document.querySelector("#favicon"),{profileAvaterURL:r,headerLogoURL:o,faviconURL:n}=i;e.src=r,t.src=o,s.href=n}();const E=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}render(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[{cardTitle:"Yosemite Valley",cardURL:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{cardTitle:"Lake Louise",cardURL:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{cardTitle:"Bald Mountains",cardURL:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{cardTitle:"Latemar",cardURL:"https://code.s3.yandex.net/web-code/latemar.jpg"},{cardTitle:"Vanoise National Park",cardURL:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{cardTitle:"Lago di Braies",cardURL:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:y},".cards");function y(e){const t=new r(e,"#card",(e=>{f.open(e)}));E.addItem(t.createCard())}E.render(),_.addEventListener("click",(function(){!function(e){const t=document.querySelector("#profileName"),s=document.querySelector("#profileTitle"),{profileName:r,profileTitle:i}=e;t.value=r,s.value=i}(p.getUserInfo()),b.resetValidation(),L.open()})),h.addEventListener("click",(function(){g.resetValidation(),v.open()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxFQUFjbEQsU0FBU2pELGNBdkRSLGdCQXdEZm9HLEVBQWVuRCxTQUFTakQsY0F2RFIsa0JBd0RkbUcsWUFBYW9DLEVBQVVuQyxhQUFjb0MsR0FBWW5HLEVBQ3pEOEQsRUFBWWIsTUFBUWlELEVBQ3BCbkMsRUFBYWQsTUFBUWtELEVBVnJCQyxDQUFnQjVDLEVBQVNLLGVBQ3pCYyxFQUFxQm5GLGtCQUNyQmlGLEVBQWF4QyxVQWtDakJxQixFQUFxQnhFLGlCQUFpQixTQVJ0QyxXQUNJNEYsRUFBa0JsRixrQkFDbEIrRSxFQUFhdEMsVyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtOC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vcHJvamVjdC04Ly4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3Byb2plY3QtOC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC04Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC04Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvLi9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LTgvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnRcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWdcclxuICAgIH1cclxuXHJcbiAgICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fY29uZmlnLmVycm9yQ2xhc3MpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIH07XHJcblxyXG4gICAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgICAgICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2NvbmZpZy5pbnB1dFNlbGVjdG9yKSk7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpXHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgICBjb25zdHJ1Y3RvcihjYXJkRGF0YSwgc2VsZWN0b3IsIGNhcmRDbGljaykge1xuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBjYXJkQ2xpY2tcbiAgICAgICAgdGhpcy5fY2FyZFRpdGxlID0gY2FyZERhdGEuY2FyZFRpdGxlXG4gICAgICAgIHRoaXMuX2NhcmRVUkwgPSBjYXJkRGF0YS5jYXJkVVJMXG4gICAgICAgIHRoaXMuX2NhcmRUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLmNvbnRlbnQ7XG5cblxuICAgIH1cblxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fY2FyZExpa2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2hhbmRsZUxpa2VDYXJkKVxuICAgICAgICB0aGlzLl9jYXJkRGVsZXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVEZWxldGVDYXJkKVxuICAgICAgICB0aGlzLl9jYXJkSW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVDbGljaylcbiAgICB9XG5cblxuICAgIF9oYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIGNhcmRVUkw6IHRoaXMuX2NhcmRJbWcuZ2V0QXR0cmlidXRlKFwic3JjXCIpLFxuICAgICAgICAgICAgY2FyZFRpdGxlOiB0aGlzLl9jYXJkSW1nLmdldEF0dHJpYnV0ZShcImFsdFwiKSxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayhkYXRhKVxuICAgIH1cblxuICAgIF9oYW5kbGVMaWtlQ2FyZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fY2FyZExpa2UuY2xhc3NMaXN0LnRvZ2dsZShcImJ0bi1saWtlX3N0YXRlX2FjdGl2ZVwiKTtcbiAgICAgICAgLy8gICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcImJ0bi1saWtlX3N0YXRlX2FjdGl2ZVwiKVxuICAgIH1cblxuICAgIF9oYW5kbGVEZWxldGVDYXJkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9jYXJkLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9jYXJkID0gbnVsbDtcbiAgICB9XG5cblxuICAgIGNyZWF0ZUNhcmQoKSB7XG4gICAgICAgIHRoaXMuX2NhcmQgPSB0aGlzLl9jYXJkVGVtcGxhdGUucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgY29uc3QgY2FyZE5hbWUgPSB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbmFtZVwiKVxuICAgICAgICB0aGlzLl9jYXJkSW1nID0gdGhpcy5fY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltZ1wiKVxuICAgICAgICB0aGlzLl9jYXJkTGlrZSA9IHRoaXMuX2NhcmQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlXCIpXG4gICAgICAgIHRoaXMuX2NhcmREZWxldGUgPSB0aGlzLl9jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWNhcmRcIilcbiAgICAgICAgY2FyZE5hbWUudGV4dENvbnRlbnQgPSB0aGlzLl9jYXJkVGl0bGVcbiAgICAgICAgdGhpcy5fY2FyZEltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgdGhpcy5fY2FyZFVSTClcbiAgICAgICAgdGhpcy5fY2FyZEltZy5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgdGhpcy5fY2FyZFRpdGxlKVxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpXG4gICAgICAgIHJldHVybiB0aGlzLl9jYXJkXG4gICAgfVxuXG59IiwiaW1wb3J0IHByb2ZpbGVBdmF0ZXJVUkwgZnJvbSBcIi4uLy4uL2ltZy9hdmF0YXJzL2F2YXRlci1pY29uLnBuZ1wiO1xyXG5pbXBvcnQgaGVhZGVyTG9nb1VSTCBmcm9tIFwiLi4vLi4vaW1nL2xvZ28vbG9nby5zdmdcIjtcclxuaW1wb3J0IGZhdmljb25VUkwgZnJvbSBcIi4uLy4uL2ltZy9mYXZpY29uL2Zhdmljb24uaWNvXCJcclxuXHJcbmV4cG9ydCBjb25zdCBpbmRleEltYWdlVXJscyA9IHtcclxuICAgIFwicHJvZmlsZUF2YXRlclVSTFwiOiBwcm9maWxlQXZhdGVyVVJMLFxyXG4gICAgXCJoZWFkZXJMb2dvVVJMXCI6IGhlYWRlckxvZ29VUkwsXHJcbiAgICBcImZhdmljb25VUkxcIjogZmF2aWNvblVSTFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFt7XHJcbiAgICAgICAgY2FyZFRpdGxlOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgICAgIGNhcmRVUkw6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUveW9zZW1pdGUuanBnXCJcclxuXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNhcmRUaXRsZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gICAgICAgIGNhcmRVUkw6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFrZS1sb3Vpc2UuanBnXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2FyZFRpdGxlOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICAgICAgY2FyZFVSTDogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9iYWxkLW1vdW50YWlucy5qcGdcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjYXJkVGl0bGU6IFwiTGF0ZW1hclwiLFxyXG4gICAgICAgIGNhcmRVUkw6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGF0ZW1hci5qcGdcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjYXJkVGl0bGU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICAgICAgY2FyZFVSTDogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS92YW5vaXNlLmpwZ1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNhcmRUaXRsZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgICAgIGNhcmRVUkw6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFnby5qcGdcIlxyXG4gICAgfVxyXG5dO1xyXG5cclxuXHJcbi8vIENvbmZpZ3NcclxuZXhwb3J0IGNvbnN0IGZvcm1Db25maWdJbmRleCA9IHtcclxuICAgIGlucHV0U2VsZWN0b3I6IFwiLnBvcHVwX19pbnB1dFwiLFxyXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19idG4tc3VibWl0XCIsXHJcbiAgICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19idG4tc3VibWl0X2luYWN0aXZlXCIsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICAgIGVycm9yQ2xhc3M6IFwicG9wdXBfX2Vycm9yX3Zpc2libGVcIlxyXG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgb3BlbigpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwib3ZlcmxheV92aXNpYmxlXCIpXHJcbiAgICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJvdmVybGF5X3Zpc2libGVcIilcclxuICAgICAgICB0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZUNsb3NlKVxyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgX2hhbmRsZUVzY0Nsb3NlID0gKGUpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZUNsb3NlID0gKGUpID0+IHtcclxuICAgICAgICBjb25zdCBlbG1DbGFzc0xpc3QgPSBlLnRhcmdldC5jbGFzc0xpc3Q7XHJcbiAgICAgICAgaWYgKGVsbUNsYXNzTGlzdC5jb250YWlucyhcIm92ZXJsYXlfX2J0bi1jbG9zZVwiKSB8fCBlbG1DbGFzc0xpc3QuY29udGFpbnMoXCJvdmVybGF5XCIpKSB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVDbG9zZSlcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSlcclxuICAgIH1cclxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHN1Ym1pdEhhbmRsZXIpIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKVxyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBzdWJtaXRIYW5kbGVyXHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKVxyXG4gICAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IHRoaXMuX2hhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9XHJcbiAgICAgICAgY29uc3QgaW5wdXRzTGlzdCA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpXVxyXG4gICAgICAgIGlucHV0c0xpc3QuZm9yRWFjaChpbnB1dCA9PiBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlKVxyXG4gICAgICAgIHJldHVybiBpbnB1dFZhbHVlc1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpXHJcbiAgICAgICAgc3VwZXIub3BlbigpXHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVN1Ym1pdClcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpXHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZVN1Ym1pdChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcih0aGlzLl9nZXRJbnB1dFZhbHVlcygpKVxyXG4gICAgICAgIHRoaXMuY2xvc2UoKVxyXG4gICAgfVxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVN1Ym1pdClcclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcblxyXG4gICAgICAgIHN1cGVyLmNsb3NlKClcclxuICAgIH1cclxuXHJcbn0iLCIvLyAgaW1wb3J0c1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgaW5pdGlhbENhcmRzLFxyXG4gICAgZm9ybUNvbmZpZ0luZGV4LFxyXG4gICAgaW5kZXhJbWFnZVVybHNcclxufSBmcm9tIFwiLi4vc3JjL3V0aWxzL2NvbnN0YW50cy5qc1wiXHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qc1wiXHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzXCJcclxuaW1wb3J0ICcuL2luZGV4LmNzcydcclxuXHJcbi8vICBTZWxlY3RvcnNcclxuY29uc3QgcHJvZmlsZUluZm9TZWxlY3RvcnMgPSB7XHJcbiAgICBwcm9maWxlTmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX19uYW1lXCIsXHJcbiAgICBwcm9maWxlVGl0bGVTZWxlY3RvcjogXCIucHJvZmlsZV9fdGl0bGVcIlxyXG59XHJcbmNvbnN0IHByb2ZpbGVGb3JtU2VsZWN0b3JzID0ge1xyXG4gICAgcHJvZmlsZU5hbWVTZWxlY3RvcjogXCIjcHJvZmlsZU5hbWVcIixcclxuICAgIHByb2ZpbGVUaXRsZVNlbGVjdG9yOiBcIiNwcm9maWxlVGl0bGVcIlxyXG59XHJcblxyXG5jb25zdCBvdmVybGF5SW1hZ2VTZWxlY3RvciA9IFwiI292ZXJsYXlJbWFnZVwiO1xyXG5jb25zdCBjYXJkTGlzdFNlbGVjdG9yID0gXCIuY2FyZHNcIlxyXG5jb25zdCBjYXJkVGVtcGxhdGVTZWxlY3RvciA9IFwiI2NhcmRcIjtcclxuY29uc3QgY2FyZEZvcm1TZWxlY3RvciA9ICcjZm9ybUNhcmQnXHJcbmNvbnN0IHByb2ZpbGVGb3JtU2VsZWN0b3IgPSAnI2Zvcm1Qcm9maWxlJ1xyXG5cclxuLy8gUHJvZmlsZSB2YXJpYWJsZXNcclxuY29uc3QgcHJvZmlsZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVGb3JtU2VsZWN0b3IpXHJcbmNvbnN0IHByb2ZpbGVBZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZCcpXHJcbmNvbnN0IHByb2ZpbGVFZGl0SW5mb0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19lZGl0LWluZm8nKVxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyhwcm9maWxlSW5mb1NlbGVjdG9ycylcclxuXHJcbi8vICBDYXJkXHJcbmNvbnN0IGNhcmRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkRm9ybVNlbGVjdG9yKVxyXG5cclxuLy8gIFBvcHVwcyBcclxuY29uc3QgcG9wdXBXaXRoSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uob3ZlcmxheUltYWdlU2VsZWN0b3IpXHJcbmNvbnN0IHBvcHVwQWRkQ2FyZCA9IG5ldyBQb3B1cFdpdGhGb3JtKGNhcmRGb3JtU2VsZWN0b3IsIGNhcmREYXRhID0+IGFkZENhcmQoY2FyZERhdGEpKVxyXG5jb25zdCBwb3B1cFByb2ZpbGUgPSBuZXcgUG9wdXBXaXRoRm9ybShwcm9maWxlRm9ybVNlbGVjdG9yLCBkYXRhID0+IHVzZXJJbmZvLnNldFVzZXJJbmZvKGRhdGEpKVxyXG5cclxuLy8gRm9ybXMgVmFsaWRhdGlvbnNcclxuY29uc3QgY2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtQ29uZmlnSW5kZXgsIGNhcmRGb3JtKVxyXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1Db25maWdJbmRleCwgcHJvZmlsZUZvcm0pXHJcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKVxyXG5jYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKClcclxuXHJcblxyXG5cclxuLy8gU2V0IGluZGV4IGltYWdlc1xyXG5pbml0SW5kZXhJbWFnZXMoKVxyXG5cclxuZnVuY3Rpb24gaW5pdEluZGV4SW1hZ2VzKCkge1xyXG4gICAgY29uc3QgcHJvZmlsZUF2YXRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZUF2YXRlclwiKTtcclxuICAgIGNvbnN0IGhlYWRlckxvZ28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2hlYWRlckxvZ29cIik7XHJcbiAgICBjb25zdCBmYXZpY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmYXZpY29uXCIpO1xyXG4gICAgY29uc3QgeyBwcm9maWxlQXZhdGVyVVJMLCBoZWFkZXJMb2dvVVJMLCBmYXZpY29uVVJMIH0gPSBpbmRleEltYWdlVXJsc1xyXG4gICAgcHJvZmlsZUF2YXRlci5zcmMgPSBwcm9maWxlQXZhdGVyVVJMO1xyXG4gICAgaGVhZGVyTG9nby5zcmMgPSBoZWFkZXJMb2dvVVJMO1xyXG4gICAgZmF2aWNvbi5ocmVmID0gZmF2aWNvblVSTDtcclxufVxyXG5cclxuXHJcblxyXG4vLyAgUHJvZmlsZSBTZWN0aW9uXHJcbmZ1bmN0aW9uIGhhbmRsZUVkaXRQcm9maWxlQnV0dG9uQ2xpY2soKSB7XHJcbiAgICBmaWxsUHJvZmlsZUZvcm0odXNlckluZm8uZ2V0VXNlckluZm8oKSlcclxuICAgIHByb2ZpbGVGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpXHJcbiAgICBwb3B1cFByb2ZpbGUub3BlbigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaWxsUHJvZmlsZUZvcm0oZGF0YSkge1xyXG4gICAgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVGb3JtU2VsZWN0b3JzLnByb2ZpbGVOYW1lU2VsZWN0b3IpXHJcbiAgICBjb25zdCBwcm9maWxlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVGb3JtU2VsZWN0b3JzLnByb2ZpbGVUaXRsZVNlbGVjdG9yKVxyXG4gICAgY29uc3QgeyBwcm9maWxlTmFtZTogdXNlck5hbWUsIHByb2ZpbGVUaXRsZTogdXNlckpvYiB9ID0gZGF0YVxyXG4gICAgcHJvZmlsZU5hbWUudmFsdWUgPSB1c2VyTmFtZVxyXG4gICAgcHJvZmlsZVRpdGxlLnZhbHVlID0gdXNlckpvYlxyXG59XHJcblxyXG4vLyAgI3JlZ2lvbiBDYXJkIFNlY3Rpb25cclxuXHJcbmNvbnN0IGNhcmRMaXN0U2VjdGlvbiA9IG5ldyBTZWN0aW9uKHtcclxuICAgIGl0ZW1zOiBpbml0aWFsQ2FyZHMsXHJcbiAgICByZW5kZXJlcjogYWRkQ2FyZFxyXG59LCBjYXJkTGlzdFNlbGVjdG9yKVxyXG5jYXJkTGlzdFNlY3Rpb24ucmVuZGVyKCk7XHJcblxyXG5mdW5jdGlvbiBhZGRDYXJkKGNhcmREYXRhKSB7XHJcbiAgICBjb25zdCBjYXJkID0gbmV3IENhcmQoY2FyZERhdGEsIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLCAoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICAgICAgcG9wdXBXaXRoSW1hZ2Uub3BlbihpbWFnZURhdGEpXHJcbiAgICB9KVxyXG4gICAgY2FyZExpc3RTZWN0aW9uLmFkZEl0ZW0oY2FyZC5jcmVhdGVDYXJkKCkpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmRCdXR0b25DbGljaygpIHtcclxuICAgIGNhcmRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpXHJcbiAgICBwb3B1cEFkZENhcmQub3BlbigpXHJcbn1cclxuLy8jZW5kcmVnaW9uIFxyXG5cclxuLy8gRXZlbnQgTGlzdGVuZXJzXHJcbnByb2ZpbGVFZGl0SW5mb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlRWRpdFByb2ZpbGVCdXR0b25DbGljayk7XHJcbnByb2ZpbGVBZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVBZGRDYXJkQnV0dG9uQ2xpY2spIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3IoeyBwcm9maWxlTmFtZVNlbGVjdG9yLCBwcm9maWxlVGl0bGVTZWxlY3RvciB9KSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVOYW1lU2VsZWN0b3IpXHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlVGl0bGVTZWxlY3RvcilcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9maWxlTmFtZTogdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgICAgICAgIHByb2ZpbGVUaXRsZTogdGhpcy5fcHJvZmlsZVRpdGxlLnRleHRDb250ZW50XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJJbmZvKHsgcHJvZmlsZU5hbWUsIHByb2ZpbGVUaXRsZSB9KSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSBwcm9maWxlTmFtZVxyXG4gICAgICAgIHRoaXMuX3Byb2ZpbGVUaXRsZS50ZXh0Q29udGVudCA9IHByb2ZpbGVUaXRsZVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHNlbGVjdG9yKVxyXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm92ZXJsYXlfX2ltZ1wiKVxyXG5cclxuICAgIH1cclxuICAgIG9wZW4oeyBjYXJkVGl0bGUsIGNhcmRVUkwgfSkge1xyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5vdmVybGF5X190ZXh0XCIpXHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBjYXJkVVJMXHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5hbHQgPSBjYXJkVGl0bGVcclxuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGNhcmRUaXRsZVxyXG4gICAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICBzdXBlci5vcGVuKClcclxuICAgIH1cclxuXHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbG9zZSlcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsb3NlKVxyXG4gICAgICAgIHN1cGVyLmNsb3NlKClcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3RvcilcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLl9yZW5kZXJlcihpdGVtKSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInAiLCJGb3JtVmFsaWRhdG9yIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJmb3JtRWxlbWVudCIsInRoaXMiLCJfZm9ybUVsZW1lbnQiLCJfY29uZmlnIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiZXJyb3JDbGFzcyIsInRleHRDb250ZW50IiwiaW5wdXRFcnJvckNsYXNzIiwiX2hpZGVJbnB1dEVycm9yIiwicmVtb3ZlIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9pbnB1dExpc3QiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsIl9idXR0b25FbGVtZW50IiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImRpc2FibGVkIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImJpbmQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiZm9yRWFjaCIsInJlc2V0VmFsaWRhdGlvbiIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsIkNhcmQiLCJjYXJkRGF0YSIsInNlbGVjdG9yIiwiY2FyZENsaWNrIiwiZGF0YSIsImNhcmRVUkwiLCJfY2FyZEltZyIsImdldEF0dHJpYnV0ZSIsImNhcmRUaXRsZSIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfY2FyZExpa2UiLCJ0b2dnbGUiLCJfY2FyZCIsIl9jYXJkVGl0bGUiLCJfY2FyZFVSTCIsIl9jYXJkVGVtcGxhdGUiLCJkb2N1bWVudCIsImNvbnRlbnQiLCJfaGFuZGxlTGlrZUNhcmQiLCJfY2FyZERlbGV0ZSIsIl9oYW5kbGVEZWxldGVDYXJkIiwiX2hhbmRsZUNsaWNrIiwiY3JlYXRlQ2FyZCIsImNsb25lTm9kZSIsImNhcmROYW1lIiwic2V0QXR0cmlidXRlIiwiaW5kZXhJbWFnZVVybHMiLCJmb3JtQ29uZmlnSW5kZXgiLCJQb3B1cCIsImUiLCJrZXkiLCJjbG9zZSIsImVsbUNsYXNzTGlzdCIsInRhcmdldCIsImNvbnRhaW5zIiwic3RvcFByb3BhZ2F0aW9uIiwiX3BvcHVwIiwib3BlbiIsInNldEV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVDbG9zZSIsIl9oYW5kbGVFc2NDbG9zZSIsIlBvcHVwV2l0aEZvcm0iLCJwb3B1cFNlbGVjdG9yIiwic3VibWl0SGFuZGxlciIsInN1cGVyIiwiX3N1Ym1pdEhhbmRsZXIiLCJfZm9ybSIsIl9oYW5kbGVTdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsImlucHV0IiwibmFtZSIsInZhbHVlIiwicmVzZXQiLCJjYXJkRm9ybVNlbGVjdG9yIiwicHJvZmlsZUZvcm1TZWxlY3RvciIsInByb2ZpbGVGb3JtIiwicHJvZmlsZUFkZENhcmRCdXR0b24iLCJwcm9maWxlRWRpdEluZm9CdXR0b24iLCJ1c2VySW5mbyIsInByb2ZpbGVOYW1lU2VsZWN0b3IiLCJwcm9maWxlVGl0bGVTZWxlY3RvciIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlVGl0bGUiLCJnZXRVc2VySW5mbyIsInByb2ZpbGVOYW1lIiwicHJvZmlsZVRpdGxlIiwic2V0VXNlckluZm8iLCJjYXJkRm9ybSIsInBvcHVwV2l0aEltYWdlIiwiX3BvcHVwSW1hZ2UiLCJ0aXRsZSIsInNyYyIsImFsdCIsInBvcHVwQWRkQ2FyZCIsImFkZENhcmQiLCJwb3B1cFByb2ZpbGUiLCJjYXJkRm9ybVZhbGlkYXRvciIsInByb2ZpbGVGb3JtVmFsaWRhdG9yIiwicHJvZmlsZUF2YXRlciIsImhlYWRlckxvZ28iLCJmYXZpY29uIiwicHJvZmlsZUF2YXRlclVSTCIsImhlYWRlckxvZ29VUkwiLCJmYXZpY29uVVJMIiwiaHJlZiIsImluaXRJbmRleEltYWdlcyIsImNhcmRMaXN0U2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXIiLCJpdGVtIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiY2FyZCIsImltYWdlRGF0YSIsInVzZXJOYW1lIiwidXNlckpvYiIsImZpbGxQcm9maWxlRm9ybSJdLCJzb3VyY2VSb290IjoiIn0=